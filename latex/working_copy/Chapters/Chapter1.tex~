\chapter{Introduction}
\label{Chapter1}
\lhead{Chapter 1. \emph{Introduction}}

This first chapter ..\\

\section{Javascript}

In order to keep up with the evolution and continuous growth of the Internet,
web technologies have been undergoing significant upgrades. Since 2007, the
World Wide Web Consortium (W3C) has been working on a major update of the core
language of the web that renders and displays all web contents. This is known
as the 5th revision of Hyper Text Markup Language (HTML5).  However the slow
performance of JavaScript in performing dynamic operations is a serious
limiting factor to wider use. Improving the efficiency of JavaScript is an
active field of research.\\

\section{Client server communications}

Client ¿ server communication have been built around the HTTP protocol. CHANGE
INTRO ..\\

\subsection{HTTP protocol}

The HTTP protocol is a request/response protocol. A client sends a request to
the server in the form of a request method, URI, and protocol version, followed
by a MIME-like message containing request modifiers, client information, and
possible body content over a connection with a server. The server responds with
a status line, including the message's protocol version and a success or error
code, followed by a MIME-like message containing server information, entity
meta information, and possible entity-body content. \citep{Reference1}\\

Because HTTP was not designed for real time communication several workarounds
have been developped over the years to over come the so called page by page
model. These techniques are nicely resumed in Eliot Step master thesis
\citep{Reference2}.

\subsection{Page by page model}

Since HTTP's release in 1991, client server communication have undergone
continuous upgrades. In the early twenties, most web pages were static. As a
consequence, the client server communication were rather limited. Typically,
the client would send from time to time a request to the server, the server
would then answer back. All communication would then stop until the client
triggered a new event.\\

\begin{figure}[H]
\centering
\includegraphics[width=0.9\textwidth]{./Figures/client_server_communication.png}
\caption[client_server_communication]{Client server communication}
\label{fig:client_server_communication}
\end{figure}

The notion of dynamic web appeared in 2005 with the apparition of technologies
like Comet. Peter Lubbers describes it as the Headache 2.0 in his article
\textit{A quantum leap in scalability for the web} \citep{Reference32}.\\

\subsection{1.2.3 ¿ Polling}

Polling was the first attempt for real-time communication. Instead of waiting
for the client to manually ask for a page update, the browser was sends regular
HTTP GET requests to the server. This technique could be efficient if the exact
interval of update on the server side was known.\\

However real time information are unpredictable and in high updates rate
situation like for example stock prices, news reports or tickets sales the
response could be stale by the time the browser renders the page
\citep{Reference32}.\\

Also in low updates rate situation even if no data is available, the server
will send an empty response. Resulting in a large amount of unnecessary
connections beeing established which over time and with the clients increase
leads to decreased overall network throughput \citep{Reference2}. \\

\begin{figure}[H]
\centering
\includegraphics[width=0.9\textwidth]{./Figures/polling.png}
\caption[polling]{polling}
\label{fig:polling}
\end{figure}

\subsection{Long polling}

Long polling is based on Comet technologies and is slight step further toward
server events and real time communication. Comet began to be popular in web
browser around 2007, it is a family of web techniques that allows the server to
hold an HTTP request open for prolonged periods of time.\\

Long-polling is similar to polling, except that the server keeps the HTTP
request open if data is not immediately available. The server determines how
long to keep the request open, also known as a hanging GET". If new data is
received within the time interval, a response containing the data is sent to
the client and the connection is closed. If new data is not received within the
time period, the server will respond with a notification to terminate the open
request and close the connection. After the client browser receives the
response, it will create another XHR object request to handle the next event,
therefore always keeping a new long-polling request open for new events. This
results in the server constantly responding with new data as soon as it is made
available \citep{Reference2}.\\

However, in situations with high-message volume, long- polling does not provide
increased performance benefits over regular polling. Performance could actually
be decreased if long-polling requests turn into continuous, unthrottled loops
of regular polling requests.\\

\begin{figure}[H]
\centering
\includegraphics[width=0.9\textwidth]{./Figures/long_polling.png}
\caption[long_polling]{Long polling}
\label{fig:long_polling}
\end{figure}

\subsection{Streaming}

Streaming is based on a persistent HTTP connection. The communication still
begins with a request from the browser, the difference is in the response. The
server never signals the browser its message is finished. This way the
connection is kept open and ready to deliver futher data. \citep{Reference2}.\\

Wouldn't it be because of proxies, streaming would be a perfectly adapted for
real time communication. Because streaming is done over HTTP, proxy server may
choose to buffer server responses and thus increasing greatly the latency of
the message delivery. Therefore in case a proxy is detected most Comet-like
solution fall back to long polling \citep{Reference2}.\\

\begin{figure}[H]
\centering
\includegraphics[width=0.9\textwidth]{./Figures/streaming.png}
\caption[streaming]{Streaming}
\label{fig:streaming}
\end{figure}

\subsection{Current technologies in browser}

At the moment, comet technologies are still the most popular way of
communication between browsers and servers. The technique has been improved to
the point where it perfectly fakes server sent event. Comet technologies can be
seen as a wonderful hack to reach real time communication. However little can
be done to improve the latency. Comet technologies resolve around HTTP and
carry its overhead\\

The total overhead from the HTTP request and response header is at least 871
bytes without containing any data. In comparaison, a small payload is 20 bytes.
Contempory application like on-line games can not be built on a technology
waisting ressources equivalent to 40 messages every time informations are
exchanged \citep{Reference2}. Therefore a brand new protocol has been
developed: WebSocket.\\

\section{WebSocket protocol}

The creation of the WebSocket protocol marks the begenning of the Living web.
It is often referred to as the first major upgrade in the history of web
communications. As the Web itself originally did, WebSocket enables entirely
new kinds of applications. Daily, new products are designed to stay permanently
connected to the web. Websocket is the language enabling this revolution.\\

The official Request For Comments \citep{Reference12} (RFC) describes the
WebSocket protocol as follows.\\

The WebSocket Protocol enables two-way communication between a client running
untrusted code in a controlled environment to a remote host that has opted-in
to communications from that code. The security model used for this is the
origin-based security model commonly used by web browsers. The protocol
consists of an opening handshake followed by basic message framing, layered
over TCP. The goal of this technology is to provide a mechanism for
browser-based applications that need two-way communication with servers that
does not rely on opening multiple HTTP connections.\\

This section is structured to follow step by step the creation of a WebSocket
communication channel. The first subsection is about the initialization of this
channel also called handshake. The second about the transport layer. After what
the messages frame anatomy will be discussed and to finish WebSocket's behavior
toward firewalls will be briefly described.\\

\subsection{The WebSocket handshake}

The Websocket protocol was to be released in an already existing web
infrastrucure. Therefore it has been designed to be backward-compatible. Before
a Websocket communication can start, a HTTP connection must be initiated. The
browser sends an Upgrade header to the server to inform him he wants to start a
WebSocket connection. Switching from the HTTP protocol to the WebSocket
protocol is referred to as a handshake \citep{Reference12}.\\

\begin{verbatim}
GET ws://websocket.example.com/ HTTP/1.1
Origin: http://example.com
Connection: Upgrade
Host: websocket.example.com
Upgrade: websocket
\end{verbatim}

If the server supports the WebSocket protocol, it sends the following header in
response.\\

\begin{verbatim}
HTTP/1.1 101 WebSocket Protocol Handshake
Date: Wed, 5 May 2014 04:04:22 GMT
Connection: Upgrade
Upgrade: WebSocket
\end{verbatim}

After the completion of the handshake the WebSocket connection is active and
either the client or the server can send data. The data is contained in frames,
each frame is prefixed with a 4-12 bytes to ensure the message can be
reconstructed. \\ Once the server and the browser have agreed on begenning a
WebSocket communication. A first request is made to begin an ethernet
communication followed by a request to make an TCP / IP communication.\\

\subsection{Transport layer protocol }

The internet is based on two transport layer protocol, the User Datagram
Protocol (UDP) and the Transmission Control Protocol (TCP). Both use the
network layer service provided by the internet protocol (IP). \\

\textbf{TCP}

TCP is a reliable transmission protocol. The data is buffered bytes by bytes in
segments and transmitted according to specific timers. This flow control
ensures the consistancy of the data. TCP is said to be a stream oriented
because the data is sent in independent segments.\\

\textbf{UDP}

UDP is an unreliable but fast transmission protocol. The protocol offers no
guarentees the data will be delivered in its integrality nor duplicated. It
works on a best effort strategy with no flow control. Each segments are
received independently, it is a message oriented protocol.\\

Websocket is build over TCP because of its realiability. Browser enabled games
are the perfect use case example of WebSockets. They require low latency even
though the rate of update is rather high. To achieve a low latency, the
communication protocol must make sure not to drop any packets. Otherwise, the
exhange takes two times longer.\\ As can be inferred from the 2 previous
subsections, the websockets protocol is depedant of quite a few other
protocols. Namely HTTP to initialize the communication then ethernet, TCP/IP
and finaly TLS in case a secure connections is required. The next subsections
looks more in details the anatomy of the frames sends over the web when using
the websocket protocol.\\

\subsection{The WebSocket frame anatomy}

The study conducted by Tobias Oberstein \citep{Reference30} looks into the
overheads of websockets. As a matter of fact the overhead induced purely by
WebSockets is extremely low. As can be seen in the figure
\ref{fig:frame_overhead}, depending on the size of the payload the overhead
varies between 8 and 20 bytes.\\

\begin{figure}[H]
\centering
\includegraphics[width=0.5\textwidth]{./Figures/frame_overhead.png}
\caption[frame_overhead]{Frame overhead \citep{Reference30}}
\label{fig:frame_overhead}
\end{figure}


However, as pointed out in the article efficiency is lost on all other layers
the websocket protocol relies on. Figure \ref{fig:tls_overhead} and
\ref{fig:tcp_overhead} show respectively the overhead induced by pure tcp/ip
and tls protocols.\\

\begin{figure}[H]
\centering
\includegraphics[width=0.9\textwidth]{./Figures/tls_overhead.png}
\caption[tls_overhead]{TLS overhead \citep{Reference30}}
\label{fig:tls_overhead}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[width=0.9\textwidth]{./Figures/tcp_overhead.png}
\caption[tcp_overhead]{TCP overhead \citep{Reference30}}
\label{fig:tcp_overhead}
\end{figure}



In this example, the payloads \textit{Hello world¿} is only therteen bytes. In
comparaison, the ethernet, tcp/ip and tls protocols each use height bytes. The
conclusion of this article is to warn programmers about the size of the
payloads to make sure ethernet, tcp/ip and tls protocols don't dwarf the
overhead of WebSocket itself.  In case small payloads can not be avoided a
possible solution is to serialize the messages in order to batch them in one
single WebSocket message.\\

So instead of sending the each messages using the WebSocket protocol like it is
done in figure x. The individual messages are put in a queue and batched in a
single Websocket message like in figure y.


\begin{figure}[H]
\centering
\includegraphics[width=0.7\textwidth]{./Figures/separate_websocket.png}
\caption[separate_websocket]{WebSocket messages sent individualy \citep{Reference30}}
\label{fig:separate_websocket}
\end{figure}

\begin{figure}[htbp]
\centering
\includegraphics[width=0.5\textwidth]{./Figures/batched_websocket.png}
\caption[batched_websocket]{Batched WebSocket messages \citep{Reference30}}
\label{fig:batched_websocket}
\end{figure}

Never the less, WebSockets carry way less overheads then comet technologies
does. Another advantage of WebSocket its interaction with proxies.\\

\subsection{Proxies}

Proxy servers are set up between a private network and the Internet. They act
like an intermediary providing content caching, security and content
filtering.\\

When a Websocket server detects the presence of a proxy server, it
automatically sets up a tunnel to pass through the proxy. The tunnel is
established by issuing an HTTP CONNECT statement to the proxy server, which
requests for the proxy server to open a TCP/IP connection to a specific host
and port. Once the tunnel is set up, communication can flow unimpeded through
the proxy.\\

LINK

\section{Scope of the thesis}
\section{Thesis structure}
